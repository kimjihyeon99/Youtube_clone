[{"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\index.js":"1","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\serviceWorker.js":"2","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\App.js":"3","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\_reducers\\index.js":"4","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\LandingPage\\LandingPage.js":"5","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\RegisterPage\\RegisterPage.js":"6","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\LoginPage\\LoginPage.js":"7","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\hoc\\auth.js":"8","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\Footer\\Footer.js":"9","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\NavBar\\NavBar.js":"10","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\_reducers\\user_reducer.js":"11","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\_actions\\user_actions.js":"12","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\NavBar\\Sections\\LeftMenu.js":"13","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\NavBar\\Sections\\RightMenu.js":"14","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\Config.js":"15","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\_actions\\types.js":"16","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoUploadPage\\VideoUploadPage.js":"17","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\VideoDetailPage.js":"18","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\Section\\SideVideo.js":"19","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\Section\\Subscribe.js":"20","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\SubscriptionPage\\SubscriptionPage.js":"21","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\Section\\Comment.js":"22","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\Section\\SingleComment.js":"23","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\Section\\ReplyComment.js":"24","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\Section\\LikeDislikes.js":"25"},{"size":1187,"mtime":1596616099000,"results":"26","hashOfConfig":"27"},{"size":4951,"mtime":1610110857394,"results":"28","hashOfConfig":"27"},{"size":1971,"mtime":1610885913372,"results":"29","hashOfConfig":"27"},{"size":157,"mtime":1610110857372,"results":"30","hashOfConfig":"27"},{"size":1913,"mtime":1610897998271,"results":"31","hashOfConfig":"27"},{"size":6254,"mtime":1610110857462,"results":"32","hashOfConfig":"27"},{"size":5121,"mtime":1610163586243,"results":"33","hashOfConfig":"27"},{"size":1455,"mtime":1610110857376,"results":"34","hashOfConfig":"27"},{"size":391,"mtime":1610163957793,"results":"35","hashOfConfig":"27"},{"size":1345,"mtime":1610163909263,"results":"36","hashOfConfig":"27"},{"size":533,"mtime":1610110857389,"results":"37","hashOfConfig":"27"},{"size":1034,"mtime":1610110857385,"results":"38","hashOfConfig":"27"},{"size":336,"mtime":1610890856604,"results":"39","hashOfConfig":"27"},{"size":1192,"mtime":1610185144696,"results":"40","hashOfConfig":"27"},{"size":57,"mtime":1610110857413,"results":"41","hashOfConfig":"27"},{"size":166,"mtime":1610110857359,"results":"42","hashOfConfig":"27"},{"size":5410,"mtime":1610777126313,"results":"43","hashOfConfig":"27"},{"size":2550,"mtime":1611235461093,"results":"44","hashOfConfig":"27"},{"size":1537,"mtime":1610794250634,"results":"45","hashOfConfig":"27"},{"size":2383,"mtime":1610890327354,"results":"46","hashOfConfig":"27"},{"size":2204,"mtime":1610894110630,"results":"47","hashOfConfig":"27"},{"size":2218,"mtime":1611101026144,"results":"48","hashOfConfig":"27"},{"size":2309,"mtime":1611238603227,"results":"49","hashOfConfig":"27"},{"size":1652,"mtime":1611102098862,"results":"50","hashOfConfig":"27"},{"size":4296,"mtime":1611240727257,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1ohquw0",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"54"},"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\index.js",[],["116","117"],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\serviceWorker.js",[],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\App.js",["118","119","120","121","122"],"import React, { Suspense } from 'react';\nimport { Route, Switch } from \"react-router-dom\";\nimport Auth from \"../hoc/auth\";\n// pages for this product\nimport LandingPage from \"./views/LandingPage/LandingPage.js\";\nimport LoginPage from \"./views/LoginPage/LoginPage.js\";\nimport RegisterPage from \"./views/RegisterPage/RegisterPage.js\";\nimport NavBar from \"./views/NavBar/NavBar\";\nimport Footer from \"./views/Footer/Footer\";\nimport VideoUploadPage from \"./views/VideoUploadPage/VideoUploadPage.js\"\nimport VideoDetailPage from \"./views/VideoDetailPage/VideoDetailPage.js\"\nimport SubscriptionPage from \"./views/SubscriptionPage/SubscriptionPage.js\"\n\n//null   Anyone Can go inside\n//true   only logged in user can go inside\n//false  logged in user can't go inside\n\nfunction App() {\n  return (\n    <Suspense fallback={(<div>Loading...</div>)}>\n      <NavBar />\n      <div style={{ paddingTop: '69px', minHeight: 'calc(100vh - 80px)' }}>\n        <Switch>\n          //null 은 해당페이지는 아무나 들어갈 수 있다.\n          <Route exact path=\"/\" component={Auth(LandingPage, null)} />\n          //false 은 로그인한 사용자는 로그인 페이지에 들어가지 못한다.\n          <Route exact path=\"/login\" component={Auth(LoginPage, false)} />\n          <Route exact path=\"/register\" component={Auth(RegisterPage, false)} />\n          //true는 로그인 한 사용자만 해당 페이지에 들어갈 수있다.\n          <Route exact path=\"/video/upload\" component={Auth(VideoUploadPage, true)} />\n          //비디오 내용을 볼수 있는페이지는 아무나 들어갈 수 있다.\n          <Route exact path=\"/video/:videoId\" component={Auth(VideoDetailPage, null)} />\n          //구독한 비디오 내용을 볼수 있는페이지는 아무나 들어갈 수 있다.\n          <Route exact path=\"/subscription\" component={Auth(SubscriptionPage, null)} />\n      </Switch>\n      </div>\n      <Footer />\n    </Suspense>\n  );\n}\n\nexport default App;\n","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\_reducers\\index.js",[],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\LandingPage\\LandingPage.js",["123","124","125"],"import React, {useEffect, useState} from 'react'\nimport { FaCode } from \"react-icons/fa\";\nimport {Card, Avatar, Col, Typography, Row} from 'antd';\nimport moment from 'moment';\nimport Icon from '@ant-design/icons';\nimport Axios from 'axios';\n\n\nconst {Title} = Typography;\nconst {Meta} = Card;\n\nfunction LandingPage() {\n\n  const [Video, setVideo] = useState([])\n\n  useEffect(()=>{\n    Axios.get('/api/video/getVideos')\n    .then(response=>{\n      if(response.data.success){\n        console.log(response.data);\n        setVideo(response.data.videos);\n      }else{\n        alert('비디오 가져오기를 실패하였습니다.')\n      }\n    })\n\n\n  }, [])\n\n    const renderCards = Video.map((video, index) =>{\n\n      var minutes = Math.floor(video.duration /60);\n      var seconds = Math.floor((video.duration - minutes * 60));\n\n      return   <Col lg={6} md={8} xs={24}>\n\n          <div style={{ position: 'relative'}}>\n            <a href={`/video/${video._id}`}>\n              <img style={{width: '100%'}} src={`http://localhost:5000/${video.thumbnail}`} />\n                <div className=\"duration\">\n                  <span> {minutes} : {seconds}</span>\n                </div>\n            </a>\n          </div>\n\n          <br />\n          <Meta\n            avartar ={\n              <Avatar src={video.writer.image} />\n            }\n            title ={video.title}\n            description=\"\"\n             />\n           <span>{video.writer.name}</span> <br />\n           <span style={{marginLeft: '3rem'}}>{video.views} views </span> - <span>{moment(video.createdAt).format(\"MMM Do YY\")}</span>\n\n        </Col>\n    })\n\n    return (\n            <div style={{width: '85%', margin: '3rem auto'}}>\n              <Title level={2}> Recommended </Title>\n              <hr/>\n              <Row gutter={[32,16]}>\n                {renderCards}\n              </Row>\n\n            </div>\n\n\n    )\n}\n\nexport default LandingPage\n","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\RegisterPage\\RegisterPage.js",["126","127"],"import React from \"react\";\nimport moment from \"moment\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { registerUser } from \"../../../_actions/user_actions\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n  Form,\n  Input,\n  Button,\n} from 'antd';\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n\nfunction RegisterPage(props) {\n  const dispatch = useDispatch();\n  return (\n\n    <Formik\n      initialValues={{\n        email: '',\n        lastName: '',\n        name: '',\n        password: '',\n        confirmPassword: ''\n      }}\n      validationSchema={Yup.object().shape({\n        name: Yup.string()\n          .required('Name is required'),\n        lastName: Yup.string()\n          .required('Last Name is required'),\n        email: Yup.string()\n          .email('Email is invalid')\n          .required('Email is required'),\n        password: Yup.string()\n          .min(6, 'Password must be at least 6 characters')\n          .required('Password is required'),\n        confirmPassword: Yup.string()\n          .oneOf([Yup.ref('password'), null], 'Passwords must match')\n          .required('Confirm Password is required')\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n\n          let dataToSubmit = {\n            email: values.email,\n            password: values.password,\n            name: values.name,\n            lastname: values.lastname,\n            image: `http://gravatar.com/avatar/${moment().unix()}?d=identicon`\n          };\n\n          dispatch(registerUser(dataToSubmit)).then(response => {\n            if (response.payload.success) {\n              props.history.push(\"/login\");\n            } else {\n              alert(response.payload.err.errmsg)\n            }\n          })\n\n          setSubmitting(false);\n        }, 500);\n      }}\n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          dirty,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          handleReset,\n        } = props;\n        return (\n          <div className=\"app\">\n            <h2>Sign up</h2>\n            <Form style={{ minWidth: '375px' }} {...formItemLayout} onSubmit={handleSubmit} >\n\n              <Form.Item required label=\"Name\">\n                <Input\n                  id=\"name\"\n                  placeholder=\"Enter your name\"\n                  type=\"text\"\n                  value={values.name}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.name && touched.name ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.name && touched.name && (\n                  <div className=\"input-feedback\">{errors.name}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Last Name\">\n                <Input\n                  id=\"lastName\"\n                  placeholder=\"Enter your Last Name\"\n                  type=\"text\"\n                  value={values.lastName}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.lastName && touched.lastName ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.lastName && touched.lastName && (\n                  <div className=\"input-feedback\">{errors.lastName}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Email\" hasFeedback validateStatus={errors.email && touched.email ? \"error\" : 'success'}>\n                <Input\n                  id=\"email\"\n                  placeholder=\"Enter your Email\"\n                  type=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.email && touched.email ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.email && touched.email && (\n                  <div className=\"input-feedback\">{errors.email}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Password\" hasFeedback validateStatus={errors.password && touched.password ? \"error\" : 'success'}>\n                <Input\n                  id=\"password\"\n                  placeholder=\"Enter your password\"\n                  type=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.password && touched.password ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-feedback\">{errors.password}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Confirm\" hasFeedback>\n                <Input\n                  id=\"confirmPassword\"\n                  placeholder=\"Enter your confirmPassword\"\n                  type=\"password\"\n                  value={values.confirmPassword}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.confirmPassword && touched.confirmPassword ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.confirmPassword && touched.confirmPassword && (\n                  <div className=\"input-feedback\">{errors.confirmPassword}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item {...tailFormItemLayout}>\n                <Button onClick={handleSubmit} type=\"primary\" disabled={isSubmitting}>\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\n\nexport default RegisterPage\n","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\LoginPage\\LoginPage.js",["128","129"],"import React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { loginUser } from \"../../../_actions/user_actions\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Input, Button, Checkbox, Typography } from 'antd';\nimport Icon from '@ant-design/icons';\nimport { useDispatch } from \"react-redux\";\n\nconst { Title } = Typography;\n\nfunction LoginPage(props) {\n  const dispatch = useDispatch();\n  const rememberMeChecked = localStorage.getItem(\"rememberMe\") ? true : false;\n\n  const [formErrorMessage, setFormErrorMessage] = useState('')\n  const [rememberMe, setRememberMe] = useState(rememberMeChecked)\n\n  const handleRememberMe = () => {\n    setRememberMe(!rememberMe)\n  };\n\n  const initialEmail = localStorage.getItem(\"rememberMe\") ? localStorage.getItem(\"rememberMe\") : '';\n\n  return (\n    <Formik\n      initialValues={{\n        email: initialEmail,\n        password: '',\n      }}\n      validationSchema={Yup.object().shape({\n        email: Yup.string()\n          .email('Email is invalid')\n          .required('Email is required'),\n        password: Yup.string()\n          .min(6, 'Password must be at least 6 characters')\n          .required('Password is required'),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          let dataToSubmit = {\n            email: values.email,\n            password: values.password\n          };\n\n          dispatch(loginUser(dataToSubmit))\n            .then(response => {\n              if (response.payload.loginSuccess) {\n                window.localStorage.setItem('userId', response.payload.userId);\n                if (rememberMe === true) {\n                  window.localStorage.setItem('rememberMe', values.id);\n                } else {\n                  localStorage.removeItem('rememberMe');\n                }\n                props.history.push(\"/\");\n              } else {\n                setFormErrorMessage('Check out your Account or Password again')\n              }\n            })\n            .catch(err => {\n              setFormErrorMessage('Check out your Account or Password again')\n              setTimeout(() => {\n                setFormErrorMessage(\"\")\n              }, 3000);\n            });\n          setSubmitting(false);\n        }, 500);\n      }}\n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          dirty,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          handleReset,\n        } = props;\n        return (\n          <div className=\"app\">\n\n            <Title level={2}>Log In</Title>\n            <form onSubmit={handleSubmit} style={{ width: '350px' }}>\n\n              <Form.Item required>\n                <Input\n                  id=\"email\"\n                  prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  placeholder=\"Enter your email\"\n                  type=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.email && touched.email ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.email && touched.email && (\n                  <div className=\"input-feedback\">{errors.email}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required>\n                <Input\n                  id=\"password\"\n                  prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  placeholder=\"Enter your password\"\n                  type=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.password && touched.password ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-feedback\">{errors.password}</div>\n                )}\n              </Form.Item>\n\n              {formErrorMessage && (\n                <label ><p style={{ color: '#ff0000bf', fontSize: '0.7rem', border: '1px solid', padding: '1rem', borderRadius: '10px' }}>{formErrorMessage}</p></label>\n              )}\n\n              <Form.Item>\n                <Checkbox id=\"rememberMe\" onChange={handleRememberMe} checked={rememberMe} >Remember me</Checkbox>\n                <a className=\"login-form-forgot\" href=\"/reset_user\" style={{ float: 'right' }}>\n                  forgot password\n                  </a>\n                <div>\n                  <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{ minWidth: '100%' }} disabled={isSubmitting} onSubmit={handleSubmit}>\n                    Log in\n                </Button>\n                </div>\n                Or <a href=\"/register\">register now!</a>\n              </Form.Item>\n            </form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default withRouter(LoginPage);\n","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\hoc\\auth.js",["130"],"/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport { auth } from '../_actions/user_actions';\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function (SpecificComponent, option, adminRoute = null) {\n    function AuthenticationCheck(props) {\n\n        let user = useSelector(state => state.user);\n        const dispatch = useDispatch();\n\n        useEffect(() => {\n            //To know my current status, send Auth request \n            dispatch(auth()).then(response => {\n                //Not Loggined in Status \n                if (!response.payload.isAuth) {\n                    if (option) {\n                        props.history.push('/login')\n                    }\n                    //Loggined in Status \n                } else {\n                    //supposed to be Admin page, but not admin person wants to go inside\n                    if (adminRoute && !response.payload.isAdmin) {\n                        props.history.push('/')\n                    }\n                    //Logged in Status, but Try to go into log in page \n                    else {\n                        if (option === false) {\n                            props.history.push('/')\n                        }\n                    }\n                }\n            })\n\n        }, [])\n\n        return (\n            <SpecificComponent {...props} user={user} />\n        )\n    }\n    return AuthenticationCheck\n}\n\n\n","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\Footer\\Footer.js",[],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\NavBar\\NavBar.js",[],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\_reducers\\user_reducer.js",["131"],"import {\n    LOGIN_USER,\n    REGISTER_USER,\n    AUTH_USER,\n    LOGOUT_USER,\n} from '../_actions/types';\n \n\nexport default function(state={},action){\n    switch(action.type){\n        case REGISTER_USER:\n            return {...state, register: action.payload }\n        case LOGIN_USER:\n            return { ...state, loginSucces: action.payload }\n        case AUTH_USER:\n            return {...state, userData: action.payload }\n        case LOGOUT_USER:\n            return {...state }\n        default:\n            return state;\n    }\n}","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\_actions\\user_actions.js",[],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\NavBar\\Sections\\LeftMenu.js",[],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\NavBar\\Sections\\RightMenu.js",[],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\Config.js",[],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\_actions\\types.js",[],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoUploadPage\\VideoUploadPage.js",["132","133"],"import React, { useState } from 'react';\r\nimport { Typography, Button, Form, message, Input } from 'antd';\r\nimport Icon from '@ant-design/icons';\r\nimport Dropzone from 'react-dropzone';\r\nimport Axios from 'axios';\r\n// subit 버튼을 액션을 위해 데이터를 가져올 때 사용하는것\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst {Title} = Typography;\r\nconst {TextArea} = Input;\r\n\r\nconst privateOption = [\r\n  {value:0, label:\"Private\"},\r\n  {value:1, label:\"Public\"}\r\n]\r\nconst categoryOption = [\r\n  {value:0, label:\"Film & Animation\"},\r\n  {value:1, label:\"Autos & Vehicles\"},\r\n  {value:2, label:\"Music\"},\r\n  {value:3, label:\"Pets & Animals\"}\r\n]\r\n\r\nfunction VideoUploadPage(props){\r\n\r\n  const user = useSelector(state => state.user);\r\n  /*state에 value를 넣어둔 뒤 서버에 보낼 때 한꺼번에 보낼 수 있음*/\r\n  const [VideoTitle, setVideoTitle] = useState(\"\");\r\n  const [Description, setDescription] = useState(\"\");\r\n  const [Private, setPrivate] = useState(0);\r\n  const [Category, setCategory] = useState(\"Film & Animation\");\r\n  const [FilePath, setFilePath] = useState(\"\");\r\n  const [Duration, setDuration] = useState(\"\");\r\n  const [ThumbnailPath, setThumbnailPath] = useState(\"\");\r\n\r\n  /*텍스트를 입력할 수 있도록 액션 추가*/\r\n  const onTitleChange = (e) =>{\r\n    setVideoTitle(e.currentTarget.value)\r\n  }\r\n  const onDescriptionChange = (e) =>{\r\n    setDescription(e.currentTarget.value)\r\n  }\r\n  const onPrivateChagne = (e) =>{\r\n    setPrivate(e.currentTarget.value)\r\n  }\r\n  const onCategoryChagne = (e) =>{\r\n    setCategory(e.currentTarget.value)\r\n  }\r\n  const onDrop = (files) =>{\r\n    let formData = new FormData;\r\n    const config = {\r\n      header: { 'content-type': 'multipart/form-data'}\r\n    }\r\n    formData.append(\"file\", files[0])\r\n\r\n    Axios.post('/api/video/uploadfiles', formData, config)\r\n      .then(response =>{\r\n        if(response.data.success){\r\n\r\n          console.log(response.data);\r\n          let variable = {\r\n            url:response.data.url,\r\n            fileName:response.data.fileName\r\n          }\r\n\r\n          setFilePath(response.data.url);\r\n\r\n          Axios.post('/api/video/thumbnail',variable)\r\n          .then(response=>{\r\n            if(response.data.success){\r\n              setDuration(response.data.fileDuration)\r\n              setThumbnailPath(response.data.url)\r\n\r\n            }else{\r\n              alert('썸네일 생성에 실패했습니다.')\r\n            }\r\n          })\r\n        }else{\r\n          alert('비디오 업로드를 실패했습니다.')\r\n        }\r\n      })\r\n  }\r\n\r\n  const onSubmit = (e) =>{\r\n    //원래 하려던것을 방지할 수 있음.??\r\n    e.preventDefault();\r\n\r\n    const variables={\r\n      writer: user.userData._id,\r\n      title: VideoTitle,\r\n      destination: Description,\r\n      privacy: Private,\r\n      filePath: FilePath,\r\n      category: Category,\r\n      duration: Duration,\r\n      thumbnail: ThumbnailPath\r\n    }\r\n\r\n    Axios.post('/api/video/uploadVideo', variables)\r\n    .then(response =>{\r\n      if(response.data.success){\r\n        console.log(response.data);\r\n        message.success('성공적으로 업로드를 했습니다.')\r\n\r\n        // 3초후에 화면전환\r\n\r\n        props.history.push('/')\r\n\r\n\r\n\r\n      }else{\r\n        alert('비디오 업로드에 실패 했습니다.')\r\n      }\r\n    })\r\n\r\n  }\r\n  return(\r\n    <div style={{maxWidth:'700px', margin:'2rem auto'}}>\r\n      <div style={{textAlign:'center', marginBottom:'2rem'}}>\r\n        <Title level={2}> Upload Video </Title>\r\n      </div>\r\n\r\n      <Form onSubmit={onSubmit}>\r\n        <div style={{display:'flex', justifyContent:'space-between'}}>\r\n          <Dropzone\r\n            onDrop = {onDrop}\r\n            multiple={false}\r\n            maxSize ={800000000}\r\n          >\r\n          {({getRootProps, getInputProps}) =>(\r\n            <div style={{width:'300px',height:'240px', border:'1px solid lightgray',display:'flex',alignItems:'center',justifyContent:'center'}} {...getRootProps()}>\r\n              <input {...getInputProps()}/>\r\n             <Icon type=\"PlusOutlined\" style={{fontSize:'3rem'}}/>\r\n            </div>\r\n          )}\r\n\r\n          </Dropzone>\r\n\r\n          {ThumbnailPath &&\r\n            <div>\r\n              <img src={`http://localhost:5000/${ThumbnailPath}`} alt=\"thumbnail\" />\r\n            </div>\r\n          }\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n        <br/>\r\n        <br/>\r\n        <label>Title</label>\r\n        <Input\r\n          onChange={onTitleChange}\r\n          value={VideoTitle}\r\n        />\r\n\r\n        <br/>\r\n        <br/>\r\n        <label>Description</label>\r\n        <TextArea\r\n          onChange={onDescriptionChange}\r\n          value={Description}\r\n        />\r\n\r\n        <br/>\r\n        <br/>\r\n\r\n        <select onChange={onPrivateChagne}>\r\n        /*map이용해서 option 생성*/\r\n        {privateOption.map((item, index)=>(\r\n            <option key={index} value={item.value}>{item.label}</option>\r\n        ))}\r\n\r\n        </select>\r\n\r\n        <br/>\r\n        <br/>\r\n\r\n        <select onChange={onCategoryChagne}>\r\n          {categoryOption.map((item, index)=>(\r\n            <option key={index} value={item.value}>{item.label}</option>\r\n          ))}\r\n        </select>\r\n\r\n        <br/>\r\n        <br/>\r\n\r\n        <Button type=\"primary\" size=\"large\" onClick={onSubmit}>\r\n          Submit\r\n        </Button>\r\n\r\n\r\n      </Form>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default VideoUploadPage\r\n","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\VideoDetailPage.js",["134"],"import React , {useEffect, useState} from 'react'\r\nimport {Row, Col, List, Avatar} from 'antd';\r\nimport Axios from 'axios';\r\nimport SideVideo from './Section/SideVideo';\r\nimport Subscribe from './Section/Subscribe';\r\nimport Comment from './Section/Comment';\r\nimport LikeDislikes from './Section/LikeDislikes';\r\n\r\nfunction VideoDetailPage(props) {\r\n\r\n  const videoId = props.match.params.videoId\r\n  const variable = { videoId: videoId }\r\n\r\n  const [VideoDetail, setVideoDetail] = useState([])\r\n  const [Comments, setComments] = useState([])\r\n\r\n  useEffect(()=>{\r\n\r\n    Axios.post('/api/video/getVideoDetail', variable)\r\n      .then(response=>{\r\n        if(response.data.success){\r\n          console.log(response.data);\r\n          setVideoDetail(response.data.video)\r\n\r\n        }else{\r\n          alert('비디오 정보 가져오기를 실패했습니다.')\r\n        }\r\n      })\r\n\r\n      Axios.post('/api/comment/getComments', variable)\r\n        .then(response=>{\r\n          if(response.data.success){\r\n            setComments(response.data.comments)\r\n            console.log(response.data.comments);\r\n          }else{\r\n              alert('코멘트 정보 가져오기를 실패했습니다.')\r\n          }\r\n        })\r\n\r\n  },[])\r\n\r\n  const refreshFunction = (newComment) =>{\r\n    setComments(Comments.concat(newComment))\r\n  }\r\n\r\n  if(VideoDetail.writer){\r\n\r\n    const subscribeButton = VideoDetail.writer._id !== localStorage.getItem('userId') && <Subscribe userTo={VideoDetail.writer._id} userFrom={localStorage.getItem('userId')}/>\r\n\r\n    return (\r\n      <Row gutter={[16,16]}>\r\n        <Col lg={18} xs={24}>\r\n          <div style={{ width: '100%', padding:'3rem 4rem'}}>\r\n            <video style={{width: '100%'}} src={`http://localhost:5000/${VideoDetail.filePath}`} controls />\r\n            <List.Item\r\n              actions={[<LikeDislikes video userId={localStorage.getItem('userId')} videoId={videoId} />, subscribeButton]}\r\n            >\r\n              <List.Item.Meta\r\n                avatar={<Avatar src={VideoDetail.writer.image} alt=\"image\"/>}\r\n                title={VideoDetail.writer.name}\r\n                destination={VideoDetail.description}\r\n              />\r\n\r\n            </List.Item>\r\n            <Comment refreshFunction={refreshFunction} commentLists={Comments} postId={videoId}/>\r\n          </div>\r\n        </Col>\r\n        <Col lg={6} xs={24}>\r\n          <SideVideo />\r\n        </Col>\r\n      </Row>\r\n\r\n    )\r\n  }else{\r\n    return(\r\n          <div>...loading</div>\r\n    )\r\n\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default VideoDetailPage\r\n","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\Section\\SideVideo.js",[],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\Section\\Subscribe.js",["135"],"import React , {useEffect, useState} from 'react'\r\nimport Axios from 'axios';\r\n\r\nfunction Subscribe(props) {\r\n\r\n  const [SubscribeNumber, setSubscribeNumber] = useState(0)\r\n  const [Subscribed, setSubscribed] = useState(false)\r\n\r\n  useEffect(()=>{\r\n\r\n    let variable = { userTo : props.userTo }\r\n\r\n    Axios.post('/api/subscribe/subscribeNumber',variable )\r\n      .then(response=> {\r\n        if(response.data.success){\r\n            setSubscribeNumber(response.data.subscribeNumber)\r\n        }else{\r\n          alert('구독자 수 정보를 받아오지 못했습니다.')\r\n        }\r\n      })\r\n\r\n    let subscribedvariable = {userTo : props.userTo, userFrom : localStorage.getItem('userId')}\r\n\r\n      Axios.post('/api/subscribe/subscribed', subscribedvariable )\r\n        .then(response=> {\r\n          if(response.data.success){\r\n              setSubscribed(response.data.subscribed)\r\n          }else{\r\n            alert('구독 정보를 받아오지 못했습니다.')\r\n          }\r\n        })\r\n  },[])\r\n\r\n  const onSubscribe = () =>{\r\n\r\n    let subscribedVariable = {\r\n      userTo : props.userTo,\r\n      userFrom : props.userFrom\r\n\r\n    }\r\n    //만일 구독중이라면\r\n    if(Subscribed){\r\n          Axios.post('/api/subscribe/unSubscribe',subscribedVariable )\r\n            .then(response=>{\r\n              if(response.data.success){\r\n                setSubscribeNumber(SubscribeNumber-1)\r\n                setSubscribed(!Subscribed)\r\n              }else{\r\n                alert('구독 취소를 실패했습니다.')\r\n              }\r\n            })\r\n\r\n    //만일 구독중이 아니라면\r\n    }else{\r\n      Axios.post('/api/subscribe/subscribe',subscribedVariable )\r\n        .then(response=>{\r\n          if(response.data.success){\r\n            setSubscribeNumber(SubscribeNumber+1)\r\n            setSubscribed(!Subscribed)\r\n          }else{\r\n            alert('구독 하기를 실패했습니다.')\r\n          }\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button style={{\r\n        backgroundColor: `${Subscribed ? '#AAAAAA':'#CC0000'}`, borderRadius: '4px',\r\n        color: 'white', padding: '10px 16px',\r\n        fontWeight: '500', fontSize: '1rem', textTransform: 'uppercase'\r\n      }}\r\n      onClick={onSubscribe}\r\n      >\r\n      {SubscribeNumber}  {Subscribed ? 'Subscribed': 'Subscribe'}\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\nexport default Subscribe\r\n","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\SubscriptionPage\\SubscriptionPage.js",["136","137","138"],"import React, {useEffect, useState} from 'react'\r\nimport { FaCode } from \"react-icons/fa\";\r\nimport {Card, Avatar, Col, Typography, Row} from 'antd';\r\nimport moment from 'moment';\r\nimport Icon from '@ant-design/icons';\r\nimport Axios from 'axios';\r\n\r\nconst {Title} = Typography;\r\nconst {Meta} = Card;\r\n\r\n\r\nfunction SubscriptionPage() {\r\n\r\n    const [Videos, setVideos] = useState([])\r\n\r\n    useEffect(()=>{\r\n\r\n      const variable = { userFrom : localStorage.getItem('userId')  }\r\n\r\n      Axios.post('/api/video/getSubscriptionVideos', variable)\r\n      .then(response=>{\r\n        if(response.data.success){\r\n          console.log(response.data);\r\n          setVideos(response.data.videos);\r\n        }else{\r\n          alert('구독한 비디오 가져오기를 실패하였습니다.')\r\n        }\r\n      })\r\n    }, [])\r\n\r\n      const renderCards = Videos.map((video, index) =>{\r\n\r\n        var minutes = Math.floor(video.duration /60);\r\n        var seconds = Math.floor((video.duration - minutes * 60));\r\n\r\n        return   <Col lg={6} md={8} xs={24}>\r\n\r\n            <div style={{ position: 'relative'}}>\r\n              <a href={`/video/${video._id}`}>\r\n                <img style={{width: '100%'}} src={`http://localhost:5000/${video.thumbnail}`} />\r\n                  <div className=\"duration\">\r\n                    <span> {minutes} : {seconds}</span>\r\n                  </div>\r\n              </a>\r\n            </div>\r\n\r\n            <br />\r\n            <Meta\r\n              avartar ={\r\n                <Avatar src={video.writer.image} />\r\n              }\r\n              title ={video.title}\r\n              description=\"\"\r\n               />\r\n             <span>{video.writer.name}</span> <br />\r\n             <span style={{marginLeft: '3rem'}}>{video.views} views </span> - <span>{moment(video.createdAt).format(\"MMM Do YY\")}</span>\r\n\r\n          </Col>\r\n      })\r\n\r\n\r\n\r\n      return (\r\n              <div style={{width: '85%', margin: '3rem auto'}}>\r\n                <Title level={2}> Subscribed Videos  </Title>\r\n                <hr/>\r\n                <Row gutter={[32,16]}>\r\n                  {renderCards}\r\n                </Row>\r\n\r\n              </div>\r\n\r\n\r\n      )\r\n}\r\nexport default SubscriptionPage\r\n","C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\Section\\Comment.js",[],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\Section\\SingleComment.js",[],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\Section\\ReplyComment.js",["139","140"],"import React , {useEffect, useState} from 'react'\r\nimport SingleComment from './SingleComment';\r\n\r\nfunction ReplyComment(props) {\r\n\r\n  const [ChildCommentNumber, setChildCommentNumber] =useState(0)\r\n  const [OpenReplyComments, setOpenReplyComments] =useState(false)\r\n\r\n  useEffect(()=>{\r\n\r\n    let commentNumber =0;\r\n\r\n    props.commentLists.map((comment)=>{\r\n      if(comment.responseTo === props.parentCommentId){\r\n        commentNumber ++\r\n      }\r\n    })\r\n    setChildCommentNumber(commentNumber)\r\n  },[props.commentLists])\r\n\r\n\r\n  // replyto 댓글이 나오는 것이므로, 부모 comment가 나올수 있도록 설정\r\n  const renderReplyComment = (parentCommentId) =>{\r\n    props.commentLists.map((comment, index) =>(\r\n\r\n      <React.Fragment>\r\n        {comment.responseTo === parentCommentId &&\r\n          <div  style={{ width: '80%', marginLeft: '40px' }}>\r\n          <SingleComment refreshFunction={props.refreshFunction} comment={comment} postId={props.videoId} />\r\n          <ReplyComment  refreshFunction={props.refreshFunction} commentLists={props.commentLists}  postId={props.videoId}  parentCommentId={comment._id}/>\r\n          </div>\r\n        }\r\n      </React.Fragment>\r\n    ))\r\n  }\r\n\r\n  const onHandleChange = () => {\r\n    setOpenReplyComments(!OpenReplyComments)\r\n  }\r\n  return(\r\n    <div>\r\n\r\n    {ChildCommentNumber > 0 &&\r\n      <p style={{ fontSize: '14px', margin:0, color: 'gray'}} onClick={onHandleChange}>\r\n        View {ChildCommentNumber} more comment(s)\r\n      </p>\r\n    }\r\n\r\n    {OpenReplyComments &&\r\n      renderReplyComment(props.parentCommentId)\r\n    }\r\n\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\nexport default ReplyComment\r\n",["141","142"],"C:\\Users\\c\\Desktop\\boilerplate-mern-stack-master\\client\\src\\components\\views\\VideoDetailPage\\Section\\LikeDislikes.js",["143","144","145","146"],"import React , { useState, useEffect} from 'react'\r\nimport Axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\nimport { Tooltip } from 'antd';\r\nimport { DislikeOutlined, LikeOutlined, DislikeFilled,LikeFilled } from '@ant-design/icons';\r\n\r\n\r\nfunction LikeDislikes(props) {\r\n\r\n\r\n  const [Likes, setLikes] = useState(0);\r\n  const [Dislikes, setDislikes] = useState(0);\r\n  const [LikeAction, setLikeAction] = useState(null);\r\n  const [DisLikeAction, setDisLikeAction] = useState(null);\r\n\r\n  let variable = {}\r\n\r\n  if(props.video){\r\n    variable = {videoId :props.videoId , userId: props.userId}\r\n  }else{\r\n    variable = {commentId: props.commentId, userId: props.userId}\r\n  }\r\n\r\n  useEffect(()=>{\r\n\r\n    Axios.post('/api/like/getLikes', variable)\r\n      .then(response=>{\r\n        if(response.data.success){\r\n            //얼마나 많은 좋아요를 받았는지\r\n            setLikes(response.data.likes.length)\r\n\r\n            //내가 이미 그 좋아요를 눌렀는지\r\n            response.data.likes.map(like=>{\r\n              if(like.userId === props.userId){\r\n                setLikeAction('liked')\r\n              }\r\n            })\r\n        }else{\r\n          alert('Likes에 정보를 가져오지 못했습니다.')\r\n        }\r\n      })\r\n\r\n    Axios.post('/api/like/getDislikes', variable)\r\n        .then(response=>{\r\n          if(response.data.success){\r\n              //얼마나 많은 싫어를 받았는지\r\n              setDislikes(response.data.dislikes.length)\r\n\r\n              //내가 이미 그 싫어요를 눌렀는지\r\n              response.data.dislikes.map(dislike=>{\r\n                if(dislike.userId === props.userId){\r\n                      setDisLikeAction('disliked')\r\n                }\r\n              })\r\n          }else{\r\n            alert('DisLike에 정보를 가져오지 못했습니다.')\r\n          }\r\n        })\r\n  },[])\r\n\r\n  const onLike = () =>{\r\n    //클릭이 안되어있는 상태에서 클릭했을때.\r\n    if(LikeAction === null){\r\n      Axios.post('/api/like/uplike',variable)\r\n        .then(response=>{\r\n          if(response.data.success){\r\n              setLikes(Likes+1)\r\n              setLikeAction('liked')\r\n\r\n              if(DisLikeAction !== null){\r\n                setDisLikeAction(null)\r\n                setDislikes(Dislikes-1)\r\n              }\r\n\r\n          }else{\r\n            alert('Like를 올리지 못했습니다.')\r\n          }\r\n        })\r\n    }else{\r\n      Axios.post('/api/like/unlike',variable)\r\n        .then(response=>{\r\n          if(response.data.success){\r\n              setLikes(Likes-1)\r\n              setLikeAction(null)\r\n          }else{\r\n            alert('Like를 내리지 못했습니다.')\r\n          }\r\n        })\r\n    }\r\n  }\r\n\r\n  const onDislike = ()=>{\r\n    //클릭이 되어있는 상태에서 클릭했을때.\r\n    if(DisLikeAction !== null){\r\n      Axios.post('/api/like/unDislike',variable)\r\n        .then(response=>{\r\n          if(response.data.success){\r\n              setDislikes(Dislikes-1)\r\n              setDisLikeAction(null)\r\n\r\n          }else{\r\n            alert('disLike를 내리지 못했습니다.')\r\n          }\r\n        })\r\n    }else{\r\n      Axios.post('/api/like/upDislike',variable)\r\n        .then(response=>{\r\n          if(response.data.success){\r\n              setDislikes(Dislikes+1)\r\n              setDisLikeAction(\"disliked\")\r\n\r\n              if(LikeAction !== null){\r\n                setLikeAction(null)\r\n                setLikes(Likes-1)\r\n              }\r\n          }else{\r\n            alert('disLike를 올리지 못했습니다.')\r\n          }\r\n        })\r\n    }\r\n  }\r\n\r\n  return(\r\n\r\n    <div>\r\n      <span key=\"comment-basic-like\">\r\n        <Tooltip title=\"Like\">\r\n        {LikeAction === 'liked' ?  <LikeFilled onClick = {onLike}/> : <LikeOutlined onClick = {onLike} /> }\r\n        </Tooltip>\r\n        <span style={{ paddingLeft:'8px', cursor:'auto' }}> {Likes} </span>\r\n      </span>\r\n\r\n      <span key=\"comment-basic-dislike\">\r\n        <Tooltip title=\"DisLike\">\r\n          {DisLikeAction === 'disliked' ?  <DislikeFilled onClick={onDislike} /> : <DislikeOutlined onClick={onDislike}/> }\r\n        </Tooltip>\r\n        <span style={{ paddingLeft:'8px', cursor:'auto' }}> {Dislikes} </span>\r\n      </span>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default LikeDislikes\r\n",{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":23,"column":17,"nodeType":"153","endLine":25,"endColumn":11},{"ruleId":"151","severity":1,"message":"152","line":25,"column":71,"nodeType":"153","endLine":27,"endColumn":11},{"ruleId":"151","severity":1,"message":"152","line":28,"column":81,"nodeType":"153","endLine":30,"endColumn":11},{"ruleId":"151","severity":1,"message":"152","line":30,"column":87,"nodeType":"153","endLine":32,"endColumn":11},{"ruleId":"151","severity":1,"message":"152","line":32,"column":89,"nodeType":"153","endLine":34,"endColumn":11},{"ruleId":"154","severity":1,"message":"155","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":16},{"ruleId":"154","severity":1,"message":"158","line":5,"column":8,"nodeType":"156","messageId":"157","endLine":5,"endColumn":12},{"ruleId":"159","severity":1,"message":"160","line":39,"column":15,"nodeType":"161","endLine":39,"endColumn":95},{"ruleId":"154","severity":1,"message":"162","line":92,"column":11,"nodeType":"156","messageId":"157","endLine":92,"endColumn":16},{"ruleId":"154","severity":1,"message":"163","line":97,"column":11,"nodeType":"156","messageId":"157","endLine":97,"endColumn":22},{"ruleId":"154","severity":1,"message":"162","line":75,"column":11,"nodeType":"156","messageId":"157","endLine":75,"endColumn":16},{"ruleId":"154","severity":1,"message":"163","line":80,"column":11,"nodeType":"156","messageId":"157","endLine":80,"endColumn":22},{"ruleId":"164","severity":1,"message":"165","line":6,"column":1,"nodeType":"166","endLine":42,"endColumn":2},{"ruleId":"164","severity":1,"message":"165","line":9,"column":1,"nodeType":"166","endLine":22,"endColumn":2},{"ruleId":"167","severity":1,"message":"168","line":49,"column":20,"nodeType":"169","messageId":"170","endLine":49,"endColumn":32,"fix":"171"},{"ruleId":"151","severity":1,"message":"152","line":168,"column":44,"nodeType":"153","endLine":170,"endColumn":9},{"ruleId":"172","severity":1,"message":"173","line":40,"column":5,"nodeType":"174","endLine":40,"endColumn":7,"suggestions":"175"},{"ruleId":"172","severity":1,"message":"176","line":32,"column":5,"nodeType":"174","endLine":32,"endColumn":7,"suggestions":"177"},{"ruleId":"154","severity":1,"message":"155","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":16},{"ruleId":"154","severity":1,"message":"158","line":5,"column":8,"nodeType":"156","messageId":"157","endLine":5,"endColumn":12},{"ruleId":"159","severity":1,"message":"160","line":40,"column":17,"nodeType":"161","endLine":40,"endColumn":97},{"ruleId":"178","severity":1,"message":"179","line":13,"column":37,"nodeType":"180","messageId":"181","endLine":13,"endColumn":39},{"ruleId":"172","severity":1,"message":"182","line":19,"column":5,"nodeType":"174","endLine":19,"endColumn":25,"suggestions":"183"},{"ruleId":"147","replacedBy":"184"},{"ruleId":"149","replacedBy":"185"},{"ruleId":"154","severity":1,"message":"186","line":3,"column":10,"nodeType":"156","messageId":"157","endLine":3,"endColumn":21},{"ruleId":"178","severity":1,"message":"179","line":33,"column":41,"nodeType":"180","messageId":"181","endLine":33,"endColumn":43},{"ruleId":"178","severity":1,"message":"179","line":50,"column":49,"nodeType":"180","messageId":"181","endLine":50,"endColumn":51},{"ruleId":"172","severity":1,"message":"187","line":59,"column":5,"nodeType":"174","endLine":59,"endColumn":7,"suggestions":"188"},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","no-unused-vars","'FaCode' is defined but never used.","Identifier","unusedVar","'Icon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'dirty' is assigned a value but never used.","'handleReset' is assigned a value but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"191","text":"192"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'variable'. Either include it or remove the dependency array.","ArrayExpression",["193"],"React Hook useEffect has a missing dependency: 'props.userTo'. Either include it or remove the dependency array.",["194"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'props.parentCommentId'. Either include it or remove the dependency array.",["195"],["189"],["190"],"'useSelector' is defined but never used.","React Hook useEffect has missing dependencies: 'props.userId' and 'variable'. Either include them or remove the dependency array.",["196"],"no-global-assign","no-unsafe-negation",[1551,1551],"()",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},"Update the dependencies array to be: [variable]",{"range":"205","text":"206"},"Update the dependencies array to be: [props.userTo]",{"range":"207","text":"208"},"Update the dependencies array to be: [props.commentLists, props.parentCommentId]",{"range":"209","text":"210"},"Update the dependencies array to be: [props.userId, variable]",{"range":"211","text":"212"},[1162,1164],"[variable]",[941,943],"[props.userTo]",[506,526],"[props.commentLists, props.parentCommentId]",[1720,1722],"[props.userId, variable]"]